spring.application.name=SpringBoot01


# SpringBoot의 대부분(95%)의 설정은 application.properties에서 진행
# 자동완성 기능을 사용하기위해
# 우클릭> open with > Generic Editor Spring properties로 여는것을 권장


# properties 파일 작성법
# 프로퍼티이름 = 값
# properties 파일에서는 스페이스바를 사용금지
# 가급적 프로젝트 우클릭 > maven > update project 할것 

# 1. Tomcat 포트번호 설정
server.port=8091

# 2. JSP를 사용하기위한 설정들
# (1)jsp를 넣기위한 폴더 구조를 만들어주어야한다. 
# (2)jsp를 파싱하기 위한 라이브러리들을 넣어주어야한다. (pom.xml)
# thymeleaf starter가 존재하면 안된다. 
# (3)ViewResolver의 prefix와 suffix를 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
# "list"라는 view 이름 리턴
# --> /WEB-INF/viwes/list.jsp(완전한 경로)

# 3. Context Path 지정
server.servlet.context-path=/boot

# 4. DBCP(DataSource)가 자동으로 생성될 수 있도록 필요한 데이터 정의 
#	(JPA/MyBatis 동일)
# driver class
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# DB URL 
spring.datasource.url=jdbc:mysql://localhost:3306/com
# DB username
spring.datasource.username=root
# DB password
spring.datasource.password=dbsdpshr11!

# 5. JPA 사용을 위한 설정 
# (1) 사용하는 DB의 종류를 지정
spring.jpa.database=mysql
# (2) 서버 시작시에 ddl 코드가 자동으로 실행, 실행 옵션을 결정
# create : 서버시작마다 테이블을 drop 한 뒤, 다시 create 
# update : 큰 변경사항(제약조건,컬렴명 변경)만 alter(수정)
# 개발 초기에는 create를 사용하다가, 어느정도 테이블이 확정되면 update로 변경
spring.jpa.hibernate.ddl-auto=create
# (3) 메소드가 실행 됐을 때 ,실행된 SQL문을 console 출력할지 여부
spring.jpa.show-sql=true
# (4) 출력되는 sql문을 정렬할지 여부
spring.jpa.properties.hibernate.format_sql=true
# (5) SQL문이 출력될 때 , 추가 정보를 표시 여부 
spring.jpa.properties.hibernate.use_sql_comments=true
